using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Diagnostics;
using CraftyCode;

namespace SimpleTester
{
	class CraftyProgram
	{
		public void Run (string[] args ) {
			CraftyInstance engine = new CraftyInstance( );
			string input = null;
			string fileContents = "";

			Stopwatch stopwatch = new Stopwatch();

			if ( File.Exists( Path.GetFullPath( args[0] ) ) )
			{
				using ( StreamReader re = File.OpenText( Path.GetFullPath( args[0] ) ) )
				{
					while ( ( input = re.ReadLine( ) ) != null )
					{
						fileContents += input;
						fileContents += "\r\n";
					}
				}

				try
				{
					engine.Compile( fileContents, args[1] );
				}
				catch ( CraftyException ke )
				{
					Console.WriteLine( ke.Message );
				}
				//input = ne
			}
			else
			{
				Console.WriteLine( "Invalid file {0}.", Path.GetFullPath( args[0] ) );
			}

			Console.WriteLine( "Finished." );
			string userInput = null;
			while ( true )
			{
				Console.Write( "> " );
				userInput = Console.ReadLine( ).Trim( ).ToLower( );
				if ( userInput == "show tokens" || userInput == "print tokens" )
				{
					engine.PrintTokens( );
				}
				else if ( userInput == "show symbols" || userInput == "print symbols" )
				{
					engine.PrintSymbolTable( );
				}
				else if (userInput == "step")
				{
					while (true)
					{
						/*if (!engine.IsExecuting)
						{
							engine.Start();
							stopwatch.Reset();
						}
						stopwatch.Start();
						engine.Run(1);
						stopwatch.Stop();
						Console.Write("Press enter to step.");
						string input2 = Console.ReadLine();
						if (input2.Length > 0)
						{
							break;
						}*/
						break;
					}
				}
				else if ( userInput == "run" )
				{
					/*
					if (!engine.IsExecuting)
					{
						stopwatch.Reset();
						engine.Start();
					}
					stopwatch.Start();
					int numberRun =  engine.Run(-1);
					stopwatch.Stop();
					Console.WriteLine("Ran {0} opcodes in {1}ms. {2} opcodes per ms.", numberRun, stopwatch.Elapsed.TotalMilliseconds, (float) numberRun / (float) stopwatch.Elapsed.TotalMilliseconds);
					 * */
				}
				else if ( userInput == "output rules" && 2 == 3 )
				{

				}
				else if ( userInput == "show rules" || userInput == "print rules" )
				{
					engine.PrintRules( );
				}
				else if ( userInput == "show opcodes" || userInput == "print opcodes" )
				{
					engine.PrintOpCodes( );
				}
				else if ( userInput == "show tree" || userInput == "print tree" )
				{
					engine.PrintSyntaxTree( );
				}
				else if ( userInput == "quit" || userInput == "exit" )
				{
					break;
				}
				else if ( userInput == "help" )
				{
					Console.WriteLine( "Show and Print are synonyms for more commands." );
					Console.WriteLine( "Quit or Exit" );
					Console.WriteLine( "\t Exits the program." );
					Console.WriteLine( "Show Tokens" );
					Console.WriteLine( "\t Prints a list of tokens generated by the lexer." );
					Console.WriteLine( "Show Rules" );
					Console.WriteLine( "\t Prints a list of parser rules." );
					Console.WriteLine( "Show Tree" );
					Console.WriteLine( "\t Prints the syntax tree." );
				}
				else
				{
					Console.WriteLine( "Invalid command." );
				}
			}
		}

		private void SetupCommands ( ) { 
			
		}
	}
}
